{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/briannablacet/Documents/GitHub/marketing-program/marketing-program-restore-copy/marketing-program/components/ui/card.tsx"],"sourcesContent":["// src/components/ui/card.tsx\nexport function Card({ children, className = '', ...props }) {\n    return (\n      <div className={`bg-white rounded-lg shadow ${className}`} {...props}>\n        {children}\n      </div>\n    );\n  }\n  \n  export function CardHeader({ children, className = '', ...props }) {\n    return <div className={`p-6 pb-0 ${className}`} {...props}>{children}</div>;\n  }\n  \n  export function CardTitle({ children, className = '', ...props }) {\n    return <h3 className={`text-lg font-medium ${className}`} {...props}>{children}</h3>;\n  }\n  \n  export function CardContent({ children, className = '', ...props }) {\n    return <div className={`p-6 ${className}`} {...props}>{children}</div>;\n  }"],"names":[],"mappings":"AAAA,6BAA6B;;;;;;;;;AACtB,SAAS,KAAK,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,GAAG,OAAO;IACvD,qBACE,0JAAC;QAAI,WAAW,CAAC,2BAA2B,EAAE,WAAW;QAAG,GAAG,KAAK;kBACjE;;;;;;AAGP;KANc;AAQP,SAAS,WAAW,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,GAAG,OAAO;IAC/D,qBAAO,0JAAC;QAAI,WAAW,CAAC,SAAS,EAAE,WAAW;QAAG,GAAG,KAAK;kBAAG;;;;;;AAC9D;MAFgB;AAIT,SAAS,UAAU,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,GAAG,OAAO;IAC9D,qBAAO,0JAAC;QAAG,WAAW,CAAC,oBAAoB,EAAE,WAAW;QAAG,GAAG,KAAK;kBAAG;;;;;;AACxE;MAFgB;AAIT,SAAS,YAAY,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,GAAG,OAAO;IAChE,qBAAO,0JAAC;QAAI,WAAW,CAAC,IAAI,EAAE,WAAW;QAAG,GAAG,KAAK;kBAAG;;;;;;AACzD;MAFgB"}},
    {"offset": {"line": 72, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///Users/briannablacet/Documents/GitHub/marketing-program/marketing-program-restore-copy/marketing-program/src/components/features/MarketingWalkthrough/components/ChannelSelectionStep/index.tsx"],"sourcesContent":["import React, { useState, useEffect, useMemo } from 'react';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\n// Utility function for calculations\nconst calculateMetrics = (channel) => {\n  const cpl = channel.leads > 0 ? channel.spend / channel.leads : 0;\n  const cpo = channel.opportunities > 0 ? channel.spend / channel.opportunities : 0;\n  const cpd = channel.deals > 0 ? channel.spend / channel.deals : 0;\n  const roi = channel.spend > 0 ? (channel.revenue - channel.spend) / channel.spend : 0;\n  const conversionRate = channel.leads > 0 ? (channel.deals / channel.leads) * 100 : 0;\n\n  return {\n    cpl: cpl.toFixed(2),\n    cpo: cpo.toFixed(2),\n    cpd: cpd.toFixed(2),\n    roi: (roi * 100).toFixed(1),\n    conversionRate: conversionRate.toFixed(1)\n  };\n};\n\nconst AIInsightPanel = ({ channels }) => {\n  const insights = useMemo(() => {\n    if (!channels.length) return [];\n    \n    const insights = [];\n    const totalSpend = channels.reduce((sum, channel) => sum + channel.spend, 0);\n    const bestROI = channels.reduce((best, channel) => {\n      const roi = channel.revenue > 0 ? (channel.revenue - channel.spend) / channel.spend : 0;\n      return roi > best.roi ? { name: channel.name, roi } : best;\n    }, { name: '', roi: -Infinity });\n    \n    const avgCPL = channels.reduce((sum, channel) => {\n      return sum + (channel.leads > 0 ? channel.spend / channel.leads : 0);\n    }, 0) / channels.length;\n\n    // Add budget allocation insight\n    insights.push({\n      icon: \"ðŸ’°\",\n      text: `Total marketing investment of $${totalSpend.toLocaleString()} across ${channels.length} channels`\n    });\n\n    // Add ROI performance insight\n    if (bestROI.roi > 0) {\n      insights.push({\n        icon: \"ðŸŽ¯\",\n        text: `${bestROI.name} is your best performing channel with ${(bestROI.roi * 100).toFixed(1)}% ROI`\n      });\n    }\n\n    // Add cost efficiency insight\n    insights.push({\n      icon: \"ðŸ“Š\",\n      text: `Average cost per lead across channels is $${avgCPL.toFixed(2)}`\n    });\n\n    // Add optimization recommendation\n    const lowPerformers = channels.filter(channel => {\n      const metrics = calculateMetrics(channel);\n      return parseFloat(metrics.roi) < 50;\n    });\n\n    if (lowPerformers.length > 0) {\n      insights.push({\n        icon: \"ðŸ’¡\",\n        text: `Consider optimizing ${lowPerformers.length} channels showing ROI below 50%`\n      });\n    }\n\n    return insights;\n  }, [channels]);\n\n  return (\n    <Card className=\"mb-8 bg-slate-50\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center gap-2\">\n          <span className=\"text-blue-600\">âœ¨</span>\n          AI Insights\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {insights.map((insight, index) => (\n            <div key={index} className=\"flex items-start gap-3\">\n              <span className=\"text-lg\">{insight.icon}</span>\n              <p className=\"text-slate-600\">{insight.text}</p>\n            </div>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n\nconst MarketingROICalculator = () => {\n  const [channels, setChannels] = useState([\n    {\n      name: 'Content Marketing',\n      spend: 5000,\n      leads: 250,\n      opportunities: 50,\n      deals: 10,\n      revenue: 50000,\n      timeframe: 'Q1'\n    },\n    {\n      name: 'Paid Search',\n      spend: 3000,\n      leads: 150,\n      opportunities: 30,\n      deals: 6,\n      revenue: 30000,\n      timeframe: 'Q1'\n    }\n  ]);\n\n  const handleChannelUpdate = (index, field, value) => {\n    const updatedChannels = [...channels];\n    updatedChannels[index] = {\n      ...updatedChannels[index],\n      [field]: Number(value)\n    };\n    setChannels(updatedChannels);\n  };\n\n  const ChannelMetrics = ({ channel, index }) => {\n    const metrics = calculateMetrics(channel);\n\n    return (\n      <Card className=\"mb-6\">\n        <CardHeader className=\"flex flex-row items-center justify-between pb-2\">\n          <CardTitle className=\"text-xl font-bold text-slate-900\">\n            {channel.name}\n          </CardTitle>\n          <span className=\"text-sm text-slate-500\">{channel.timeframe}</span>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n            <div>\n              <p className=\"text-sm text-slate-600\">Cost per Lead</p>\n              <p className=\"text-2xl font-bold text-slate-900\">${metrics.cpl}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-slate-600\">Cost per Opportunity</p>\n              <p className=\"text-2xl font-bold text-slate-900\">${metrics.cpo}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-slate-600\">Cost per Deal</p>\n              <p className=\"text-2xl font-bold text-slate-900\">${metrics.cpd}</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-slate-600\">ROI</p>\n              <p className=\"text-2xl font-bold text-green-600\">{metrics.roi}%</p>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n            <div className=\"p-4 bg-slate-50 rounded\">\n              <label className=\"text-sm text-slate-600\">Spend</label>\n              <input\n                type=\"number\"\n                value={channel.spend}\n                onChange={(e) => handleChannelUpdate(index, 'spend', e.target.value)}\n                className=\"w-full mt-1 p-2 border rounded bg-white\"\n              />\n            </div>\n            <div className=\"p-4 bg-slate-50 rounded\">\n              <label className=\"text-sm text-slate-600\">Leads</label>\n              <input\n                type=\"number\"\n                value={channel.leads}\n                onChange={(e) => handleChannelUpdate(index, 'leads', e.target.value)}\n                className=\"w-full mt-1 p-2 border rounded bg-white\"\n              />\n            </div>\n            <div className=\"p-4 bg-slate-50 rounded\">\n              <label className=\"text-sm text-slate-600\">Opportunities</label>\n              <input\n                type=\"number\"\n                value={channel.opportunities}\n                onChange={(e) => handleChannelUpdate(index, 'opportunities', e.target.value)}\n                className=\"w-full mt-1 p-2 border rounded bg-white\"\n              />\n            </div>\n            <div className=\"p-4 bg-slate-50 rounded\">\n              <label className=\"text-sm text-slate-600\">Deals</label>\n              <input\n                type=\"number\"\n                value={channel.deals}\n                onChange={(e) => handleChannelUpdate(index, 'deals', e.target.value)}\n                className=\"w-full mt-1 p-2 border rounded bg-white\"\n              />\n            </div>\n            <div className=\"p-4 bg-slate-50 rounded\">\n              <label className=\"text-sm text-slate-600\">Revenue</label>\n              <input\n                type=\"number\"\n                value={channel.revenue}\n                onChange={(e) => handleChannelUpdate(index, 'revenue', e.target.value)}\n                className=\"w-full mt-1 p-2 border rounded bg-white\"\n              />\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  };\n\n  const PerformanceChart = () => {\n    const chartData = channels.map(channel => ({\n      name: channel.name,\n      roi: parseFloat(calculateMetrics(channel).roi),\n      cpl: parseFloat(calculateMetrics(channel).cpl),\n      conversionRate: parseFloat(calculateMetrics(channel).conversionRate)\n    }));\n\n    return (\n      <div className=\"h-96\">\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <LineChart data={chartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis yAxisId=\"left\" />\n            <YAxis yAxisId=\"right\" orientation=\"right\" />\n            <Tooltip />\n            <Legend />\n            <Line\n              yAxisId=\"left\"\n              type=\"monotone\"\n              dataKey=\"roi\"\n              stroke=\"#22c55e\"\n              name=\"ROI %\"\n            />\n            <Line\n              yAxisId=\"right\"\n              type=\"monotone\"\n              dataKey=\"cpl\"\n              stroke=\"#3b82f6\"\n              name=\"Cost per Lead ($)\"\n            />\n            <Line\n              yAxisId=\"right\"\n              type=\"monotone\"\n              dataKey=\"conversionRate\"\n              stroke=\"#f59e0b\"\n              name=\"Conversion Rate %\"\n            />\n          </LineChart>\n        </ResponsiveContainer>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-8\">\n      <div className=\"flex justify-between items-center mb-8\">\n        <h1 className=\"text-2xl font-bold text-slate-900\">\n          Marketing ROI Calculator\n        </h1>\n        <button\n          onClick={() => setChannels([...channels, {\n            name: `Channel ${channels.length + 1}`,\n            spend: 0,\n            leads: 0,\n            opportunities: 0,\n            deals: 0,\n            revenue: 0,\n            timeframe: 'Q1'\n          }])}\n          className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700\"\n        >\n          Add Channel\n        </button>\n      </div>\n\n      <AIInsightPanel channels={channels} />\n\n      <Card className=\"mb-8\">\n        <CardHeader>\n          <CardTitle>Performance Overview</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <PerformanceChart />\n        </CardContent>\n      </Card>\n\n      <div className=\"space-y-6\">\n        {channels.map((channel, index) => (\n          <ChannelMetrics key={index} channel={channel} index={index} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default MarketingROICalculator;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 800, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}